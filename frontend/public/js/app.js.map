{"version":3,"sources":["inits.js","session-control.js"],"names":["getGet","name","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","debug","log","message","undefined","console","$","document","ready","DOM","leanModal","userSessionControl","_this","this","data","authIntent","user","toggleIntent","setLoginUI","setRegister","html","setloginRegister","val","loginRegister","email","pass","action","loginattempt","ajax","method","username","password","done","removeClass","closeModal","setLoginHeaderUI","fail","error","addClass","getCurrentUser","cb","updateGlobalUI","triggers","on","click","preventDefault","submit","get","response","dynamicUpdate","setInterval","userManager"],"mappings":"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","file":"app.js","sourcesContent":["// \n// Helpers\n// \n\nfunction getGet( name, url ) {\t\t\t// Function to easily get GET parameters, source SO\n\tif ( !url ) url = window.location.href\n\tname = name.replace( /[\\[\\]]/g, \"\\\\$&\" )\n\tvar regex = new RegExp( \"[?&]\" + name + \"(=([^&#]*)|&|#|$)\" ),\n\tresults = regex.exec( url )\n\tif ( !results ) return null\n\tif ( !results[2] ) return ''\n\treturn decodeURIComponent( results[2].replace( /\\+/g, \" \" ) )\n}\n\nvar debug = {\t\t\t\t\t\t\t// Debug console logger, only console.log when ?debug is in URL\n\tlog: function ( message ) {\n\t\tif ( getGet( 'debug' ) != undefined ) console.log( message )\n\t}\n}\n\n// After DOM load\n$( document ).ready(  ( DOM ) => {\n\tdebug.log( 'Inits checking in' )\n\t$('.modal-trigger').leanModal();\t// Init materialize modal functionality\n} )","let userSessionControl = function (  ) {\n\t\n\t// Login form console\n\tdebug.log( 'Loginform init' )\n\tthis.data = {\n\t\tauthIntent: 'login',\n\t\tuser: undefined\n\t}\n\tthis.toggleIntent = (  ) => {\t\t// Toggle the intent status\n\t\tif ( this.data.authIntent == 'login' )\n\t\t\tthis.data.authIntent = 'register'\n\t\telse \n\t\t\tthis.data.authIntent = 'login'\n\t}\n\n\tthis.setLoginUI = (  ) => { \t\t// Set the login modal title and button based on intent\n\t\tdebug.log( 'Adapt login modal GUI' )\n\t\t$( '#loginform input' ).val( '' ) // empty the form\n\t\tfunction setRegister(  ) {\n\t\t\tdebug.log( 'Setting register' )\n\t\t\t$( '#logintitle, #loginbutton' ).html( 'Register' )\n\t\t\t$( '#toggleintent' ).html( 'Log into existing account' )\n\t\t}\n\t\tfunction setloginRegister(  ) {\n\t\t\tdebug.log( 'Setting login' )\n\t\t\t$( '#logintitle, #loginbutton' ).html( 'Login' )\n\t\t\t$( '#toggleintent' ).html( 'Register an account' )\n\t\t}\n\n\t\tif( this.data.authIntent == 'login' )\n\t\t\tsetloginRegister(  )\n\t\telse\n\t\t\tsetRegister(  )\n\t}\n\n\tthis.loginRegister = (  ) => {\t\t\t\t// Login behavior through the modal popup\n\t\tvar email = $( '#loginuser' ).val(  )\n\t\tvar pass  = $( '#loginpassword' ).val(  )\n\t\tvar action = (  ) => {\n\t\t\tif( this.data.authIntent == 'login' ) {\n\t\t\t\treturn '/login/local'\n\t\t\t} else {\n\t\t\t\treturn '/register/new'\n\t\t\t}\n\t\t}\n\t\tvar loginattempt = $.ajax( {\n\t\t\turl: action(  ),\n\t\t\tmethod: 'POST',\n\t\t\tdata: {\n\t\t\t\tusername: email,\n\t\t\t\tpassword: pass\n\t\t\t}\n\t\t} )\n\t\t// Attempt to log in over ajax\n\t\tloginattempt.done( ( user ) => {\n\t\t\tdebug.log( 'Login succeeded with status:' )\n\t\t\tdebug.log( user )\n\t\t\tthis.data.user = user // Set the user based on the response\n\t\t\t$( '#loginmessage' ).html( 'Login complete!' ).removeClass( 'hide' )\n\t\t\t$( '#loginmodal' ).closeModal(  )\n\t\t\tthis.setLoginHeaderUI(  )\n\t\t} )\n\t\t// Catch the error and show it to the user\n\t\tloginattempt.fail( ( error, message ) => {\n\t\t\tdebug.log( error )\n\t\t\tdebug.log( message )\n\t\t\t$( '#loginmessage' ).html( 'Login failed!' ).removeClass( 'hide' )\n\t\t} )\n\t}\n\n\tthis.setLoginHeaderUI = (  ) => {\t\t\t// Update the UI to reflect the user details\n\t\tif ( this.data.user != undefined ) {\n\t\t\tdebug.log( this.data.user )\n\t\t\t$( '#loggedoutmenu' ).addClass( 'hide' )\n\t\t\t$( '#loggedinmenu' ).removeClass( 'hide' )\n\t\t\t$( '#logoutmenubutton' ).html( 'Logout ' + this.data.user.email )\n\t\t} else {\n\t\t\t$( '#loggedoutmenu' ).removeClass( 'hide' )\n\t\t\t$( '#loggedinmenu' ).addClass( 'hide' )\n\t\t\t$( '#logoutmenubutton' ).html( 'Logout' )\n\t\t}\n\t\t$( '#loginmessage' ).html( '' ).addClass( 'hide' )\n\t}\n\n\tthis.getCurrentUser = cb => {\n\t\t$.ajax( {\n\t\t\turl: '/login/current',\n\t\t\tmethod: 'GET'\n\t\t} )\n\t\t// Attempt to get session over ajax\n\t\t.done( ( user ) => {\n\t\t\tif( user.email != undefined ) {\n\t\t\t\tdebug.log( 'User session retreived: ' )\n\t\t\t\tdebug.log( user )\n\t\t\t\tthis.data.user = user // Set the user based on the response\n\t\t\t}\n\t\t\tcb(  )\n\t\t} )\n\t\t// Catch the error and show it to the user\n\t\t.fail( ( error, message ) => {\n\t\t\tdebug.log( 'No user session' )\n\t\t\tthis.data.user = null\n\t\t\tcb(  )\n\t\t} )\n\t}\n\n\tthis.updateGlobalUI = (  ) => {\n\t\tdebug.log( 'Update global UI' )\n\t\tthis.getCurrentUser( this.setLoginHeaderUI )\n\t}\n\n\tthis.triggers = (  ) => {\n\t\t// Click triggers for the modal\n\t\t$( '#loginmodal' )\n\t\t.on( 'click', '#toggleintent', click => {\n\t\t\tclick.preventDefault(  )\n\t\t\tthis.toggleIntent(  )\n\t\t\tthis.setLoginUI(  )\n\t\t} )\n\t\t.on( 'submit', '#loginform', submit => {\n\t\t\tsubmit.preventDefault(  )\n\n\t\t\tif ( this.data.authIntent == 'login' ) {\n\t\t\t\tthis.loginRegister(  )\n\t\t\t} else if ( this.data.authIntent == 'register' ) {\n\t\t\t\tthis.loginRegister(  )\n\t\t\t}\n\n\t\t\tthis.setLoginUI(  )\n\t\t} )\n\t\t// Click triggers for the interface\n\t\t// Header\n\t\t$( '#nav' )\n\t\t.on( 'click', '#logoutmenubutton', ( click ) => {\n\t\t\tclick.preventDefault(  )\n\t\t\t$.get( '/login/destroy', ( response ) => {\n\t\t\t\tdebug.log( 'User logged out with: ' + response )\n\t\t\t\tthis.data.user = undefined\n\t\t\t\tthis.setLoginHeaderUI(  )\n\t\t\t} )\n\t\t} )\n\t}\n\n\tthis.dynamicUpdate = (  ) => {\n\t\t// Periodic check for being logged in  etc\n\t\tsetInterval( this.updateGlobalUI, 10 * 1000 )\n\t}\n\t\n}\n\n$( document ).ready(  DOM => {\n\tdebug.log( 'Session control checking in ' )\n\n\t// Manage the interface\n\tvar userManager = new userSessionControl(  )\n\tuserManager.updateGlobalUI(  )\n\tuserManager.triggers(  )\n\tuserManager.dynamicUpdate(  )\n\t\n} )"],"sourceRoot":"/source/"}